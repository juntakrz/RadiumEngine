#version 460
#extension GL_EXT_nonuniform_qualifier : require

#include "include/common.glsl"

layout(local_size_x = 8, local_size_y = 4) in;
layout(set = 0, binding = 0, rgba16f) uniform imageCube images[];
layout(set = 0, binding = 1) uniform samplerCube samplers[];

layout (push_constant) uniform PushBlock {
	uint imageIndex;
	uint imageCount;
    ivec4 intValues;	// x - total mip levels, y - current face, z - num samples
} pushBlock;

const uint sourceSize = 512;

void prefilterCubemap(ivec3 srcPosition, ivec2 cubemapSize, int mipLevel, float roughness) {
	const uint divisor = 1 << mipLevel;

	if (gl_GlobalInvocationID.x % divisor != 0 || gl_GlobalInvocationID.y % divisor != 0) return;
	
	vec3 N = cubePixelToWorldPosition(srcPosition, cubemapSize);
	vec3 V = N;
	vec3 color = vec3(0.0);
	int totalSamples = pushBlock.intValues.z;
	float totalWeight = 0.0;
	float envMapDimension = float(cubemapSize.x);

	for(uint i = 0u; i < totalSamples; i++) {
		vec2 Xi = hammersley2D(i, totalSamples);
		vec3 H = importanceSampleGGX(Xi, roughness, N);
		vec3 L = 2.0 * dot(V, H) * H - V;
		float dotNL = clamp(dot(N, L), 0.0, 1.0);
		if(dotNL > 0.0) {
			// Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/
			float dotNH = clamp(dot(N, H), 0.0, 1.0);
			float dotVH = clamp(dot(V, H), 0.0, 1.0);

			// Probability Distribution Function
			float pdf = distributionGGX(dotNH, roughness) * dotNH / (4.0 * dotVH) + 0.0001;

			// Slid angle of current smple
			float omegaS = 1.0 / (float(totalSamples) * pdf);

			// Solid angle of 1 pixel across all cube faces
			float omegaP = 4.0 * M_PI / (6.0 * envMapDimension * envMapDimension);

			// Biased (+1.0) mip level for better result
			float samplerMipLevel = roughness == 0.0 ? 0.0 : max(0.5 * log2(omegaS / omegaP) + 1.0, 0.0f);
			color += textureLod(samplers[0], L, samplerMipLevel).rgb * dotNL;
			totalWeight += dotNL;
		}
	}
	
	imageStore(images[mipLevel], ivec3(srcPosition.xy / divisor, srcPosition.z), vec4(color / totalWeight, 1.0));
}

void main() {
	ivec3 sourcePosition = ivec3(gl_GlobalInvocationID.xy, pushBlock.intValues.y);

	if (sourcePosition.x >= sourceSize || sourcePosition.y >= sourceSize) {
		return;
	}
	
	const int totalMipLevels = pushBlock.intValues.x;
	const float fTotalMipLevels = float(totalMipLevels - 1);

	for (int mipLevel = 0; mipLevel < totalMipLevels; mipLevel++) {
		const float roughness = float(mipLevel) / fTotalMipLevels;
		prefilterCubemap(sourcePosition, ivec2(sourceSize, sourceSize), mipLevel, roughness);
	}
}